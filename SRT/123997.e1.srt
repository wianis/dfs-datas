<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anime Arama</title>
    <style>
        :root {
            --primary-color: #007bff;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --gold-color: #ffc107;
            --background-color: #121212;
            --card-background-color: #1e1e1e;
            --text-color: #ffffff;
            --border-color: #333;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .search-container {
            width: 100%;
            max-width: 600px;
            margin-top: 20px;
            margin-bottom: 20px;
            display: flex;
        }

        #search-input {
            flex-grow: 1;
            padding: 15px 25px;
            font-size: 1.5em;
            background-color: var(--card-background-color);
            border: 2px solid var(--border-color);
            border-right: none;
            color: var(--text-color);
            border-radius: 50px 0 0 50px;
            box-sizing: border-box;
            text-align: center;
            transition: border-color 0.3s ease;
        }
        
        #search-button {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0 25px;
            background-color: var(--card-background-color);
            border: 2px solid var(--border-color);
            border-left: none;
            color: white;
            border-radius: 0 50px 50px 0;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #search-button svg {
            width: 28px;
            height: 28px;
            fill: #ccc;
            transition: fill 0.3s ease;
        }

        #search-button:hover {
            background-color: #2a2a2a;
        }
        
        #search-button:hover svg {
            fill: white;
        }

        #search-input:focus, #search-input:focus + #search-button {
            outline: none;
            border-color: var(--primary-color);
        }
        
        #search-input:disabled, #search-input:disabled + #search-button {
            background-color: #2a2a2a;
            cursor: not-allowed;
            border-color: #2a2a2a;
        }
        
        #search-input:disabled + #search-button {
            cursor: not-allowed;
        }
        
        #search-input:disabled + #search-button svg {
            fill: #666;
        }

        .results-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 20px;
            width: 100%;
            max-width: 1400px;
            margin-top: 20px;
        }

        .poster-card {
            position: relative;
            background-color: var(--card-background-color);
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid var(--border-color);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            aspect-ratio: 2 / 3;
        }
        
        .poster-card.has-data:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
        }

        .poster-card img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

        .poster-title {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0,0,0,0.9), rgba(0,0,0,0));
            color: white;
            padding: 20px 10px 10px 10px;
            font-size: 0.9em;
            text-align: center;
            font-weight: bold;
        }

        .tag {
            position: absolute;
            padding: 4px 8px;
            font-size: 0.8em;
            font-weight: bold;
            color: white;
            border-radius: 4px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
        }

        .tag-top-left {
            top: 8px;
            left: 8px;
            max-width: 80%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .tag-top-right {
            top: 8px;
            right: 8px;
        }Çevirmen: annen

        .tag-blue { background-color: var(--primary-color); }
        .tag-green { background-color: var(--success-color); }
        .tag-red { background-color: var(--danger-color); }
        .tag-gold { background-color: var(--gold-color); color: #121212; }
        
        #status-message {
            font-size: 1.2em;
            min-height: 1.5em;
        }

        @media (max-width: 1200px) { .results-grid { grid-template-columns: repeat(4, 1fr); } }
        @media (max-width: 900px) { .results-grid { grid-template-columns: repeat(3, 1fr); } }
        @media (max-width: 600px) { .results-grid { grid-template-columns: repeat(2, 1fr); } }

    </style>
</head>
<body>

    <div id="status-message"></div>

    <div class="search-container">
        <input type="text" id="search-input" placeholder="Anime Ara..." disabled>
        <button id="search-button" disabled>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/></svg>
        </button>
    </div>

    <div class="results-grid" id="results-container"></div>

    <script>
        const GITHUB_CONFIG = {
            owner: 'wianis',
            repo: 'dfs-datas',
            branch: 'main',
            dataFile: 'anime_data.txt'
        };

        const structuredAnimeData = new Map();

        async function loadAndParseAnimeData() {
            const statusMessage = document.getElementById('status-message');
            const searchInput = document.getElementById('search-input');
            const searchButton = document.getElementById('search-button');
            
            statusMessage.textContent = 'Veri dosyası yükleniyor...';
            searchInput.disabled = true;
            searchButton.disabled = true;

            const url = `https://raw.githubusercontent.com/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}/${GITHUB_CONFIG.branch}/${GITHUB_CONFIG.dataFile}`;
            
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Varsayılan GitHub deposuna veya veri dosyasına ulaşılamadı.');
                
                const content = await response.text();
                
                parseAnimeDataForSearch(content);
                statusMessage.textContent = '';
                searchInput.disabled = false;
                searchButton.disabled = false;
            } catch (error) {
                console.error("Veri dosyası yüklenirken hata:", error);
                statusMessage.textContent = `Hata: ${error.message}`;
                statusMessage.style.color = 'var(--danger-color)';
            }
        }

        function parseAnimeDataForSearch(content) {
            structuredAnimeData.clear();
            if (!content) return;
            const lines = content.split(/,\s*\n|\n/);
            lines.forEach(line => {
                line = line.trim();
                if (line === '') return;

                const anilistIdMatch = line.match(/anilist\.co\/anime\/(\d+)/);
                const episodesMatch = line.match(/\[(.*)\]/);

                if (anilistIdMatch && episodesMatch) {
                    const anilistId = anilistIdMatch[1];
                    const episodeContent = episodesMatch[1].trim();
                    const episodeParts = episodeContent.split(/,(?=E\d+\s*\()/).map(p => p.trim());
                    
                    const episodeCount = episodeParts.length > 0 && episodeParts[0] !== '' ? episodeParts.length : 0;
                    
                    structuredAnimeData.set(anilistId, {
                        episodeCount: episodeCount
                    });
                }
            });
        }

        async function performSearch(query) {
            const statusMessage = document.getElementById('status-message');
            const resultsContainer = document.getElementById('results-container');
            
            resultsContainer.innerHTML = '';
            statusMessage.textContent = `"${query}" aranıyor...`;
            statusMessage.style.color = 'var(--text-color)';

            const apiQuery = `
                query ($search: String, $perPage: Int) {
                    Page(page: 1, perPage: $perPage) {
                        media(search: $search, type: ANIME, sort: SEARCH_MATCH) {
                            id
                            title {
                                romaji
                                english
                            }
                            coverImage {
                                extraLarge
                            }
                            episodes
                            status
                            meanScore
                            nextAiringEpisode {
                                episode
                            }
                        }
                    }
                }`;
            
            const variables = { search: query, perPage: 25 };

            try {
                const response = await fetch('https://graphql.anilist.co', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                    body: JSON.stringify({ query: apiQuery, variables: variables })
                });

                const apiData = await response.json();
                const animeList = apiData.data.Page.media;

                if (!animeList || animeList.length === 0) {
                    statusMessage.textContent = 'Sonuç bulunamadı.';
                    return;
                }

                displayResults(animeList);
                statusMessage.textContent = '';

            } catch (error) {
                console.error('AniList API Hatası:', error);
                statusMessage.textContent = 'Arama sırasında bir hata oluştu.';
                statusMessage.style.color = 'var(--danger-color)';
            }
        }
        
        function displayResults(animeList) {
            const resultsContainer = document.getElementById('results-container');
            resultsContainer.innerHTML = '';

            animeList.forEach(anime => {
                const card = document.createElement('div');
                card.className = 'poster-card';

                const localData = structuredAnimeData.get(anime.id.toString());
                
                let totalAiredEpisodes = anime.episodes;
                if (anime.status === 'RELEASING' && anime.nextAiringEpisode) {
                    totalAiredEpisodes = anime.nextAiringEpisode.episode - 1;
                }
                if (!totalAiredEpisodes) {
                    totalAiredEpisodes = '?';
                }

                if (localData) {
                    card.classList.add('has-data');
                    const translatedCount = localData.episodeCount;
                    const isComplete = anime.status === 'FINISHED' && totalAiredEpisodes > 0 && translatedCount >= totalAiredEpisodes;

                    if (isComplete) {
                        const completeTag = document.createElement('div');
                        completeTag.className = 'tag tag-top-left tag-green';
                        completeTag.textContent = 'Bütün Bölümler Çevrildi';
                        card.appendChild(completeTag);
                    } else {
                        const episodeTag = document.createElement('div');
                        episodeTag.className = 'tag tag-top-left tag-gold';
                        episodeTag.textContent = `${translatedCount}/${totalAiredEpisodes} Bölüm Çevrildi`;
                        episodeTag.title = `Toplam ${totalAiredEpisodes} bölümün ${translatedCount} tanesi çevrilmiştir.`;
                        card.appendChild(episodeTag);
                    }

                    if (anime.meanScore) {
                        const scoreTag = document.createElement('div');
                        scoreTag.className = 'tag tag-top-right tag-blue';
                        scoreTag.textContent = `Puan: ${(anime.meanScore / 10).toFixed(1)}`;
                        scoreTag.title = `Kullanıcı Puanı: ${anime.meanScore} / 100`;
                        card.appendChild(scoreTag);
                    }

                } else {
                    const tagCeviriYok = document.createElement('div');
                    tagCeviriYok.className = 'tag tag-top-left tag-red';
                    tagCeviriYok.textContent = 'Çeviri Yok';
                    card.appendChild(tagCeviriYok);

                    if (anime.meanScore) {
                        const scoreTag = document.createElement('div');
                        scoreTag.className = 'tag tag-top-right tag-blue';
                        scoreTag.textContent = `Puan: ${(anime.meanScore / 10).toFixed(1)}`;
                        scoreTag.title = `Kullanıcı Puanı: ${anime.meanScore} / 100`;
                        card.appendChild(scoreTag);
                    }
                }

                const img = document.createElement('img');
                img.src = anime.coverImage.extraLarge;
                img.alt = anime.title.romaji || anime.title.english;
                
                const title = document.createElement('div');
                title.className = 'poster-title';
                title.textContent = anime.title.romaji || anime.title.english;

                card.appendChild(img);
                card.appendChild(title);
                resultsContainer.appendChild(card);
            });
        }

        function setupSearchListener() {
            const searchInput = document.getElementById('search-input');
            const searchButton = document.getElementById('search-button');

            const triggerSearch = () => {
                const query = searchInput.value.trim();
                if (query && !searchInput.disabled) {
                    performSearch(query);
                }
            };

            searchInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    triggerSearch();
                }
            });

            searchButton.addEventListener('click', triggerSearch);
        }

        window.onload = () => {
            setupSearchListener();
            loadAndParseAnimeData();
        };

    </script>
</body>
</html>